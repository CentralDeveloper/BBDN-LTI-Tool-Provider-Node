// Generated by CoffeeScript 1.10.0
/*(function() {
  var HMAC_SHA1, CaliperDocument, CaliperService, crypto, errors, http, https, navigateXml, url, utils, uuid, xml2js, xml_builder;
  
  crypto = require('crypto');

  http = require('http');

  https = require('https');

  url = require('url');

  uuid = require('node-uuid');

  xml2js = require('xml2js');

  xml_builder = require('xmlbuilder');

  errors = require('../errors');

  HMAC_SHA1 = require('../hmac-sha1');

  utils = require('../utils');

  navigateXml = function(xmlObject, path) {
    var i, len, part, ref, ref1;
    ref = path.split('.');
    for (i = 0, len = ref.length; i < len; i++) {
      part = ref[i];
      xmlObject = xmlObject != null ? (ref1 = xmlObject[part]) != null ? ref1[0] : void 0 : void 0;
    }
    return xmlObject;
  };

  CaliperDocument = (function() {
    function CaliperDocument(caliper_service) {
      var xmldec;
      this.caliper_service = caliper_service;
      xmldec = {
        version: '1.0',
        encoding: 'UTF-8'
      };
    }
  })();

    
  CaliperService = (function() {
    function CaliperService(options) {
      var parts;
      if (options == null) {
        options = {};
      }
      this.consumer_key = options.consumer_key;
      this.consumer_secret = options.consumer_secret;
      this.caliper_profile_url = options.caliper_profile_url;
      this.signer = options.signer || (new HMAC_SHA1());
      this.cert_authority = options.cert_authority || null;
      this.language = options.language || 'en';
      parts = this.caliper_profile_url_parts = url.parse(this.caliper_profile_url, true);
      this.caliper_profile_url_oauth = parts.protocol + '//' + parts.host + parts.pathname;
    }

    CaliperService.prototype.register_caliper_listener = function(callback) {
      var err, error;
      
      try {
        return this._send_request(callback);
      } catch (error) {
        err = error;
        return callback(err, false);
      }
    };
    
    CaliperService.prototype._send_request = function(callback) {
      var body, is_ssl, options, req, xml;
      is_ssl = this.caliper_profile_url_parts.protocol === 'https:';
      options = {
        hostname: this.caliper_profile_url_parts.hostname,
        path: this.caliper_profile_url_parts.path,
        method: 'GET',
        headers: this._build_headers(xml)
      };
      if (this.cert_authority && is_ssl) {
        options.ca = this.cert_authority;
      } else {
        options.agent = is_ssl ? https.globalAgent : http.globalAgent;
      }
      if (this.caliper_profile_url_parts.port) {
        options.port = this.caliper_profile_url_parts.port;
      }
      req = (is_ssl ? https : http).request(options, (function(_this) {
        return function(res) {
          res.setEncoding('utf8');
          res.on('data', function(chunk) {
            return body += chunk;
          });
          return res.on('end', function() {
            return _this._process_response(body, callback);
          });
        };
      })(this));
      req.on('error', (function(_this) {
        return function(err) {
          return callback(err, false);
        };
      })(this));
      req.write("");
      return req.end();
    };

    CaliperService.prototype._build_headers = function(body) {
      var headers, key, val;
      headers = {
        oauth_version: '1.0',
        oauth_nonce: uuid.v4(),
        oauth_timestamp: Math.round(Date.now() / 1000),
        oauth_consumer_key: this.consumer_key,
        oauth_signature_method: 'HMAC-SHA1'
      };
      headers.oauth_signature = this.signer.build_signature_raw(this.caliper_profile_url_oauth, this.caliper_profile_url_parts, 'GET', headers, this.consumer_secret);
      return {
        Authorization: 'OAuth realm="",' + ((function() {
          var results;
          results = [];
          for (key in headers) {
            val = headers[key];
            results.push(key + "=\"" + (utils.special_encode(val)) + "\"");
          }
          return results;
        })()).join(','),
        'Content-Type': 'application/xml',
        'Content-Length': 0
      };
    };

    CaliperService.prototype._process_response = function(body, callback) {
      console.log("In CaliperService: " + body);
      callback(body);
    };

    return CaliperService;

  })();

  exports.init = function(provider) {
    return provider.caliper_service = new CaliperService({
        consumer_key: provider.consumer_key,
        consumer_secret: provider.consumer_secret,
        caliper_profile_url: provider.body.caliper_profile_url,
        custom_caliper_federated_session_id: provider.body.custom_caliper_federated_session_id,
        signer: provider.signer
      });
  };

  exports.CaliperService = CaliperService;

}).call(this);
*/